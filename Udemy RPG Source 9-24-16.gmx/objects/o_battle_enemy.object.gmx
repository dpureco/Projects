<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_battle_bat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_battle_character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the battle enemy
// Inherit
event_inherited();

// Monster level
level = 1;

// Get the monster's stats
get_stats_from_class("spider");
draw_health = stats[? "health"];

// Set sprite array
sprite[IDLING] = asset_get_index("s_battle_"+string_lower(stats[? "name"]));
sprite[FORWARD] = asset_get_index("s_battle_"+string_lower(stats[? "name"]+"_move_forward"));
sprite[ATTACKING] = asset_get_index("s_battle_"+string_lower(stats[? "name"]+"_attack"));
sprite[BACK] = asset_get_index("s_battle_"+string_lower(stats[? "name"]+"_move_back"));
sprite[HIT] = asset_get_index("s_battle_"+string_lower(stats[? "name"]+"_hit"));

// Set animation speed array
animation_speed[IDLING] = .3;
animation_speed[ATTACKING] = .3;
animation_speed[FORWARD] = 0;
animation_speed[BACK] = 0;
animation_speed[HIT] = 0;

// Set Sprite
sprite_index = sprite[IDLING];

// Set the state
state = enemy_battle_idle_state;

// Set the stats object
stats_object = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add experience, return to overworld, destroy stats map
o_player_stats.stats[? "experience"] += min(level/2, 1)*stats[? "experience"];

// Go to last room
var transition = instance_create(0, 0, o_fade_transition);
transition.next_room = o_game.last_room;

// Destroy the stats
ds_map_destroy(stats);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update the draw health
draw_health = approach(draw_health, stats[? "health"], 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Run the state
event_inherited();

// Check for attack or death
if (ds_exists(stats, ds_type_map) &amp;&amp; stats[? "health"] == draw_health) {
    if (stats[? "health"] &lt;= 0) {
        instance_destroy();
        o_battle_view.state = battle_view_idle_state;
    }
}

// Execute the current state
script_execute(state);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the health
event_inherited();

// Draw the health bar
draw_battle_healthbar(xstart, 32, draw_health, stats[? "maxhealth"]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
